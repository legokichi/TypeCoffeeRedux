// Generated by CoffeeScript 1.7.1
(function() {
  var concat, foldl, map, nub, span,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  this.any = function(list, fn) {
    var e, _i, _len;
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      e = list[_i];
      if (fn(e)) {
        return true;
      }
    }
    return false;
  };

  this.all = function(list, fn) {
    var e, _i, _len;
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      e = list[_i];
      if (!fn(e)) {
        return false;
      }
    }
    return true;
  };

  this.foldl = foldl = function(memo, list, fn) {
    var i, _i, _len;
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      i = list[_i];
      memo = fn(memo, i);
    }
    return memo;
  };

  this.foldl1 = function(list, fn) {
    return foldl(list[0], list.slice(1), fn);
  };

  this.map = map = function(list, fn) {
    var e, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      e = list[_i];
      _results.push(fn(e));
    }
    return _results;
  };

  this.concat = concat = function(list) {
    var _ref;
    return (_ref = []).concat.apply(_ref, list);
  };

  this.concatMap = function(list, fn) {
    return concat(map(list, fn));
  };

  this.intersect = function(listA, listB) {
    var a, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = listA.length; _i < _len; _i++) {
      a = listA[_i];
      if (__indexOf.call(listB, a) >= 0) {
        _results.push(a);
      }
    }
    return _results;
  };

  this.difference = function(listA, listB) {
    var a, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = listA.length; _i < _len; _i++) {
      a = listA[_i];
      if (__indexOf.call(listB, a) < 0) {
        _results.push(a);
      }
    }
    return _results;
  };

  this.nub = nub = function(list) {
    var i, result, _i, _len;
    result = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      i = list[_i];
      if (__indexOf.call(result, i) < 0) {
        result.push(i);
      }
    }
    return result;
  };

  this.union = function(listA, listB) {
    var b;
    return listA.concat((function() {
      var _i, _len, _ref, _results;
      _ref = nub(listB);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        if (__indexOf.call(listA, b) < 0) {
          _results.push(b);
        }
      }
      return _results;
    })());
  };

  this.flip = function(fn) {
    return function(b, a) {
      return fn.call(this, a, b);
    };
  };

  this.owns = (function(hop) {
    return function(a, b) {
      return hop.call(a, b);
    };
  })({}.hasOwnProperty);

  this.span = span = function(list, f) {
    var ys, zs, _ref;
    if (list.length === 0) {
      return [[], []];
    } else if (f(list[0])) {
      _ref = span(list.slice(1), f), ys = _ref[0], zs = _ref[1];
      return [[list[0]].concat(__slice.call(ys)), zs];
    } else {
      return [[], list];
    }
  };

  this.divMod = function(a, b) {
    var c, div, mod;
    c = a % b;
    mod = c < 0 ? c + b : c;
    div = Math.floor(a / b);
    return [div, mod];
  };

  this.partition = function(list, fn) {
    var item, result, _i, _len;
    result = [[], []];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      item = list[_i];
      result[+(!fn(item))].push(item);
    }
    return result;
  };

}).call(this);
